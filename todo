# üìå TODO (Backlog / Scrum)

Backlog detalhado do projeto **Desaparecidos SPA**, organizado em **Sprints**.  
Cada Sprint est√° quebrada em **√©picos, hist√≥rias de usu√°rio e tarefas t√©cnicas**.

---

## üü¢ Sprint 1 ‚Äì Estrutura inicial

### √âpico: Configura√ß√£o do ambiente
**Hist√≥rias de usu√°rio:**
- Como desenvolvedor, quero configurar o ambiente base para iniciar o projeto de forma padronizada.  

**Tarefas t√©cnicas:**
- [X] Criar projeto com **Vite + React + TypeScript** (`npm create vite@latest desaparecidos-spa`).  
- [X] Configurar **Tailwind CSS** com `postcss` e `autoprefixer`.  
- [X] Criar arquivo `tailwind.config.js` e incluir paths do projeto.  
- [X] Configurar **ESLint + TypeScript** (lint e prettier rules b√°sicas).  

- [X] Criar **Dockerfile** para build e deploy:  
  - Etapa de build (Node 22)  
  - Etapa de produ√ß√£o (Nginx ou similar).  

- [X] Criar estrutura de rotas com `react-router-dom` + **lazy loading** (`React.lazy`, `Suspense`).  

- [X] Criar estrutura de pastas:  

    src/
    components/
    pages/
    services/
    hooks/
    assets/

---

## üü° Sprint 2 ‚Äì Tela Inicial

### √âpico: Listagem de pessoas
**Hist√≥rias de usu√°rio:**
- Como cidad√£o, quero visualizar pessoas desaparecidas/localizadas em cards para ter acesso r√°pido √†s informa√ß√µes.  
- Como cidad√£o, quero buscar por nome ou filtros para encontrar uma ocorr√™ncia espec√≠fica.  

**Tarefas t√©cnicas:**
- [ ] Criar p√°gina **Home** (`/`).  
- [ ] Criar componente **CardPessoa** (foto, nome, status).  
- [ ] Criar componente **StatusBadge** (verde para Localizado, vermelho para Desaparecido).  
- [ ] Criar componente **Pagination** com m√≠nimo de 10 registros por p√°gina.  
- [ ] Criar componente **SearchBar** integrado com a API.  
- [ ] Criar servi√ßo `api.ts` com **axios** configurado (baseURL, interceptors de erro).  
- [ ] Integrar **listagem com API real** (`GET /pessoas`).  
- [ ] Tratar erros de API (mensagens de fallback).  

---

## üîµ Sprint 3 ‚Äì P√°gina de Detalhes

### √âpico: Visualizar detalhes da ocorr√™ncia
**Hist√≥rias de usu√°rio:**
- Como cidad√£o, quero visualizar os detalhes de uma ocorr√™ncia para ter todas as informa√ß√µes.  
- Como cidad√£o, quero entender facilmente o status da pessoa (Desaparecida ou Localizada).  

**Tarefas t√©cnicas:**
- [ ] Criar p√°gina **Detalhes** (`/detalhes/:id`).  
- [ ] Criar hook `useFetchDetalhePessoa(id)` para buscar dados da API.  
- [ ] Criar componente **DetalhePessoaCard** (foto, nome, idade, descri√ß√£o, status, data, contatos).  
- [ ] Destacar visualmente o **status da pessoa**.  
- [ ] Tratar erro quando registro n√£o for encontrado (mostrar mensagem amig√°vel).  
- [ ] Adicionar bot√£o ‚ÄúRegistrar informa√ß√µes‚Äù (leva para formul√°rio da Sprint 4).  

---

## üü£ Sprint 4 ‚Äì Envio de Informa√ß√µes

### √âpico: Contribui√ß√£o cidad√£
**Hist√≥rias de usu√°rio:**
- Como cidad√£o, quero registrar informa√ß√µes sobre uma pessoa desaparecida para ajudar a investiga√ß√£o.  
- Como cidad√£o, quero anexar fotos e indicar localiza√ß√£o para facilitar a identifica√ß√£o.  

**Tarefas t√©cnicas:**
- [ ] Criar p√°gina **Enviar Informa√ß√µes** (`/detalhes/:id/registrar`).  
- [ ] Criar formul√°rio com campos:  
- Observa√ß√µes (textarea)  
- Localiza√ß√£o avistada (input texto ou mapa)  
- Data (input com m√°scara `dd/mm/yyyy`)  
- Telefone (m√°scara `(99) 99999-9999`)  
- Upload de fotos (campo de upload com preview).  
- [ ] Criar componente **FileUpload** (com preview de imagem).  
- [ ] Implementar m√°scara de inputs com `react-input-mask` ou similar.  
- [ ] Criar servi√ßo `api.ts` para enviar dados (`POST /informacoes`).  
- [ ] Exibir mensagem de **sucesso/erro** ap√≥s envio.  

---

## üî¥ Sprint 5 ‚Äì Qualidade e Deploy

### √âpico: Qualidade e publica√ß√£o
**Hist√≥rias de usu√°rio:**
- Como desenvolvedor, quero garantir que a aplica√ß√£o seja responsiva e confi√°vel antes de entregar.  
- Como equipe, queremos disponibilizar o projeto em Docker e documentado no GitHub.  

**Tarefas t√©cnicas:**
- [ ] Testar aplica√ß√£o em diferentes resolu√ß√µes (mobile, tablet, desktop).  
- [ ] Adicionar **loading states** (spinners, skeletons).  
- [ ] Adicionar mensagens de erro mais amig√°veis (ex.: "Nenhum registro encontrado").  
- [ ] Rodar build no Docker e validar ambiente (`docker build`, `docker run`).  
- [ ] Revisar c√≥digo e padr√µes (lint, imports, nomes de vari√°veis).  
- [ ] Criar documenta√ß√£o final no **README.md**:  
- Dados do candidato.  
- Passo a passo para rodar localmente.  
- Passo a passo para rodar com Docker.  
- Endpoints da API utilizados.  
- [ ] Publicar reposit√≥rio no **GitHub p√∫blico**.  

---
